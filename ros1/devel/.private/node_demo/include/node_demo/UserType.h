// Generated by gencpp from file node_demo/UserType.msg
// DO NOT EDIT!


#ifndef NODE_DEMO_MESSAGE_USERTYPE_H
#define NODE_DEMO_MESSAGE_USERTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace node_demo
{
template <class ContainerAllocator>
struct UserType_
{
  typedef UserType_<ContainerAllocator> Type;

  UserType_()
    : demo_header()
    , demo_bool(false)
    , demo_byte(0)
    , demo_floats()  {
    }
  UserType_(const ContainerAllocator& _alloc)
    : demo_header(_alloc)
    , demo_bool(false)
    , demo_byte(0)
    , demo_floats(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _demo_header_type;
  _demo_header_type demo_header;

   typedef uint8_t _demo_bool_type;
  _demo_bool_type demo_bool;

   typedef int8_t _demo_byte_type;
  _demo_byte_type demo_byte;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _demo_floats_type;
  _demo_floats_type demo_floats;





  typedef boost::shared_ptr< ::node_demo::UserType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::node_demo::UserType_<ContainerAllocator> const> ConstPtr;

}; // struct UserType_

typedef ::node_demo::UserType_<std::allocator<void> > UserType;

typedef boost::shared_ptr< ::node_demo::UserType > UserTypePtr;
typedef boost::shared_ptr< ::node_demo::UserType const> UserTypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::node_demo::UserType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::node_demo::UserType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::node_demo::UserType_<ContainerAllocator1> & lhs, const ::node_demo::UserType_<ContainerAllocator2> & rhs)
{
  return lhs.demo_header == rhs.demo_header &&
    lhs.demo_bool == rhs.demo_bool &&
    lhs.demo_byte == rhs.demo_byte &&
    lhs.demo_floats == rhs.demo_floats;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::node_demo::UserType_<ContainerAllocator1> & lhs, const ::node_demo::UserType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace node_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::node_demo::UserType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::node_demo::UserType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::node_demo::UserType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::node_demo::UserType_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_demo::UserType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_demo::UserType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::node_demo::UserType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78526411b17121c33eed9a69a6cc32f7";
  }

  static const char* value(const ::node_demo::UserType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78526411b17121c3ULL;
  static const uint64_t static_value2 = 0x3eed9a69a6cc32f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::node_demo::UserType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "node_demo/UserType";
  }

  static const char* value(const ::node_demo::UserType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::node_demo::UserType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header demo_header\n"
"bool demo_bool\n"
"byte demo_byte\n"
"float32[] demo_floats\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::node_demo::UserType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::node_demo::UserType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.demo_header);
      stream.next(m.demo_bool);
      stream.next(m.demo_byte);
      stream.next(m.demo_floats);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UserType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::node_demo::UserType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::node_demo::UserType_<ContainerAllocator>& v)
  {
    s << indent << "demo_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.demo_header);
    s << indent << "demo_bool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.demo_bool);
    s << indent << "demo_byte: ";
    Printer<int8_t>::stream(s, indent + "  ", v.demo_byte);
    s << indent << "demo_floats[]" << std::endl;
    for (size_t i = 0; i < v.demo_floats.size(); ++i)
    {
      s << indent << "  demo_floats[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.demo_floats[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODE_DEMO_MESSAGE_USERTYPE_H

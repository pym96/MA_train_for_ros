# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/MapSentryData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class MapSentryData(genpy.Message):
  _md5sum = "d6e15a95bf254643938dfaa446ff12c8"
  _type = "rm_msgs/MapSentryData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 intention
uint16 start_position_x
uint16 start_position_y
int8[49] delta_x
int8[49] delta_y

time stamp
"""
  __slots__ = ['intention','start_position_x','start_position_y','delta_x','delta_y','stamp']
  _slot_types = ['uint8','uint16','uint16','int8[49]','int8[49]','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       intention,start_position_x,start_position_y,delta_x,delta_y,stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapSentryData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.intention is None:
        self.intention = 0
      if self.start_position_x is None:
        self.start_position_x = 0
      if self.start_position_y is None:
        self.start_position_y = 0
      if self.delta_x is None:
        self.delta_x = [0] * 49
      if self.delta_y is None:
        self.delta_y = [0] * 49
      if self.stamp is None:
        self.stamp = genpy.Time()
    else:
      self.intention = 0
      self.start_position_x = 0
      self.start_position_y = 0
      self.delta_x = [0] * 49
      self.delta_y = [0] * 49
      self.stamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2H().pack(_x.intention, _x.start_position_x, _x.start_position_y))
      buff.write(_get_struct_49b().pack(*self.delta_x))
      buff.write(_get_struct_49b().pack(*self.delta_y))
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.intention, _x.start_position_x, _x.start_position_y,) = _get_struct_B2H().unpack(str[start:end])
      start = end
      end += 49
      self.delta_x = _get_struct_49b().unpack(str[start:end])
      start = end
      end += 49
      self.delta_y = _get_struct_49b().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2H().pack(_x.intention, _x.start_position_x, _x.start_position_y))
      buff.write(self.delta_x.tostring())
      buff.write(self.delta_y.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.intention, _x.start_position_x, _x.start_position_y,) = _get_struct_B2H().unpack(str[start:end])
      start = end
      end += 49
      self.delta_x = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=49)
      start = end
      end += 49
      self.delta_y = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=49)
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_49b = None
def _get_struct_49b():
    global _struct_49b
    if _struct_49b is None:
        _struct_49b = struct.Struct("<49b")
    return _struct_49b
_struct_B2H = None
def _get_struct_B2H():
    global _struct_B2H
    if _struct_B2H is None:
        _struct_B2H = struct.Struct("<B2H")
    return _struct_B2H

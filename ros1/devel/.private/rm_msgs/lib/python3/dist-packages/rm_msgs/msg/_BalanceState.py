# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/BalanceState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class BalanceState(genpy.Message):
  _md5sum = "563c6259b4e510bcb83a9719793e4546"
  _type = "rm_msgs/BalanceState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """uint8  NORMAL = 0
uint8  FALLEN = 1

std_msgs/Header header

uint8 mode
float64 x
float64 phi
float64 theta
float64 x_b_l
float64 x_b_r
float64 x_dot
float64 phi_dot
float64 theta_dot
float64 x_b_l_dot
float64 x_b_r_dot
float64 acc_x
float64 acc_y
float64 acc_z

float64 T_l
float64 T_r
float64 f_b_l
float64 f_b_r

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  NORMAL = 0
  FALLEN = 1

  __slots__ = ['header','mode','x','phi','theta','x_b_l','x_b_r','x_dot','phi_dot','theta_dot','x_b_l_dot','x_b_r_dot','acc_x','acc_y','acc_z','T_l','T_r','f_b_l','f_b_r']
  _slot_types = ['std_msgs/Header','uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mode,x,phi,theta,x_b_l,x_b_r,x_dot,phi_dot,theta_dot,x_b_l_dot,x_b_r_dot,acc_x,acc_y,acc_z,T_l,T_r,f_b_l,f_b_r

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BalanceState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mode is None:
        self.mode = 0
      if self.x is None:
        self.x = 0.
      if self.phi is None:
        self.phi = 0.
      if self.theta is None:
        self.theta = 0.
      if self.x_b_l is None:
        self.x_b_l = 0.
      if self.x_b_r is None:
        self.x_b_r = 0.
      if self.x_dot is None:
        self.x_dot = 0.
      if self.phi_dot is None:
        self.phi_dot = 0.
      if self.theta_dot is None:
        self.theta_dot = 0.
      if self.x_b_l_dot is None:
        self.x_b_l_dot = 0.
      if self.x_b_r_dot is None:
        self.x_b_r_dot = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.T_l is None:
        self.T_l = 0.
      if self.T_r is None:
        self.T_r = 0.
      if self.f_b_l is None:
        self.f_b_l = 0.
      if self.f_b_r is None:
        self.f_b_r = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.mode = 0
      self.x = 0.
      self.phi = 0.
      self.theta = 0.
      self.x_b_l = 0.
      self.x_b_r = 0.
      self.x_dot = 0.
      self.phi_dot = 0.
      self.theta_dot = 0.
      self.x_b_l_dot = 0.
      self.x_b_r_dot = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.T_l = 0.
      self.T_r = 0.
      self.f_b_l = 0.
      self.f_b_r = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B17d().pack(_x.mode, _x.x, _x.phi, _x.theta, _x.x_b_l, _x.x_b_r, _x.x_dot, _x.phi_dot, _x.theta_dot, _x.x_b_l_dot, _x.x_b_r_dot, _x.acc_x, _x.acc_y, _x.acc_z, _x.T_l, _x.T_r, _x.f_b_l, _x.f_b_r))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 137
      (_x.mode, _x.x, _x.phi, _x.theta, _x.x_b_l, _x.x_b_r, _x.x_dot, _x.phi_dot, _x.theta_dot, _x.x_b_l_dot, _x.x_b_r_dot, _x.acc_x, _x.acc_y, _x.acc_z, _x.T_l, _x.T_r, _x.f_b_l, _x.f_b_r,) = _get_struct_B17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B17d().pack(_x.mode, _x.x, _x.phi, _x.theta, _x.x_b_l, _x.x_b_r, _x.x_dot, _x.phi_dot, _x.theta_dot, _x.x_b_l_dot, _x.x_b_r_dot, _x.acc_x, _x.acc_y, _x.acc_z, _x.T_l, _x.T_r, _x.f_b_l, _x.f_b_r))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 137
      (_x.mode, _x.x, _x.phi, _x.theta, _x.x_b_l, _x.x_b_r, _x.x_dot, _x.phi_dot, _x.theta_dot, _x.x_b_l_dot, _x.x_b_r_dot, _x.acc_x, _x.acc_y, _x.acc_z, _x.T_l, _x.T_r, _x.f_b_l, _x.f_b_r,) = _get_struct_B17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B17d = None
def _get_struct_B17d():
    global _struct_B17d
    if _struct_B17d is None:
        _struct_B17d = struct.Struct("<B17d")
    return _struct_B17d

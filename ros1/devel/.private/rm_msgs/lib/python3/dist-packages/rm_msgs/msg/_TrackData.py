# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/TrackData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class TrackData(genpy.Message):
  _md5sum = "90f0f1ca5b79dd2fabd894dad7de25af"
  _type = "rm_msgs/TrackData"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint8 id
bool tracking
uint8 armors_num
geometry_msgs/Point position
float64 yaw
geometry_msgs/Vector3 velocity
float64 v_yaw
float64 radius_1
float64 radius_2
float64 dz
float64 accel

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','id','tracking','armors_num','position','yaw','velocity','v_yaw','radius_1','radius_2','dz','accel']
  _slot_types = ['std_msgs/Header','uint8','bool','uint8','geometry_msgs/Point','float64','geometry_msgs/Vector3','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,tracking,armors_num,position,yaw,velocity,v_yaw,radius_1,radius_2,dz,accel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.tracking is None:
        self.tracking = False
      if self.armors_num is None:
        self.armors_num = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.yaw is None:
        self.yaw = 0.
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.v_yaw is None:
        self.v_yaw = 0.
      if self.radius_1 is None:
        self.radius_1 = 0.
      if self.radius_2 is None:
        self.radius_2 = 0.
      if self.dz is None:
        self.dz = 0.
      if self.accel is None:
        self.accel = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.tracking = False
      self.armors_num = 0
      self.position = geometry_msgs.msg.Point()
      self.yaw = 0.
      self.velocity = geometry_msgs.msg.Vector3()
      self.v_yaw = 0.
      self.radius_1 = 0.
      self.radius_2 = 0.
      self.dz = 0.
      self.accel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B12d().pack(_x.id, _x.tracking, _x.armors_num, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.v_yaw, _x.radius_1, _x.radius_2, _x.dz, _x.accel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 99
      (_x.id, _x.tracking, _x.armors_num, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.v_yaw, _x.radius_1, _x.radius_2, _x.dz, _x.accel,) = _get_struct_3B12d().unpack(str[start:end])
      self.tracking = bool(self.tracking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B12d().pack(_x.id, _x.tracking, _x.armors_num, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.v_yaw, _x.radius_1, _x.radius_2, _x.dz, _x.accel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 99
      (_x.id, _x.tracking, _x.armors_num, _x.position.x, _x.position.y, _x.position.z, _x.yaw, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.v_yaw, _x.radius_1, _x.radius_2, _x.dz, _x.accel,) = _get_struct_3B12d().unpack(str[start:end])
      self.tracking = bool(self.tracking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B12d = None
def _get_struct_3B12d():
    global _struct_3B12d
    if _struct_3B12d is None:
        _struct_3B12d = struct.Struct("<3B12d")
    return _struct_3B12d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I

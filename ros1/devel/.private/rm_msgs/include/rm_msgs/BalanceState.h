// Generated by gencpp from file rm_msgs/BalanceState.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_BALANCESTATE_H
#define RM_MSGS_MESSAGE_BALANCESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rm_msgs
{
template <class ContainerAllocator>
struct BalanceState_
{
  typedef BalanceState_<ContainerAllocator> Type;

  BalanceState_()
    : header()
    , mode(0)
    , x(0.0)
    , phi(0.0)
    , theta(0.0)
    , x_b_l(0.0)
    , x_b_r(0.0)
    , x_dot(0.0)
    , phi_dot(0.0)
    , theta_dot(0.0)
    , x_b_l_dot(0.0)
    , x_b_r_dot(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , T_l(0.0)
    , T_r(0.0)
    , f_b_l(0.0)
    , f_b_r(0.0)  {
    }
  BalanceState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , x(0.0)
    , phi(0.0)
    , theta(0.0)
    , x_b_l(0.0)
    , x_b_r(0.0)
    , x_dot(0.0)
    , phi_dot(0.0)
    , theta_dot(0.0)
    , x_b_l_dot(0.0)
    , x_b_r_dot(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , T_l(0.0)
    , T_r(0.0)
    , f_b_l(0.0)
    , f_b_r(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef double _x_type;
  _x_type x;

   typedef double _phi_type;
  _phi_type phi;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _x_b_l_type;
  _x_b_l_type x_b_l;

   typedef double _x_b_r_type;
  _x_b_r_type x_b_r;

   typedef double _x_dot_type;
  _x_dot_type x_dot;

   typedef double _phi_dot_type;
  _phi_dot_type phi_dot;

   typedef double _theta_dot_type;
  _theta_dot_type theta_dot;

   typedef double _x_b_l_dot_type;
  _x_b_l_dot_type x_b_l_dot;

   typedef double _x_b_r_dot_type;
  _x_b_r_dot_type x_b_r_dot;

   typedef double _acc_x_type;
  _acc_x_type acc_x;

   typedef double _acc_y_type;
  _acc_y_type acc_y;

   typedef double _acc_z_type;
  _acc_z_type acc_z;

   typedef double _T_l_type;
  _T_l_type T_l;

   typedef double _T_r_type;
  _T_r_type T_r;

   typedef double _f_b_l_type;
  _f_b_l_type f_b_l;

   typedef double _f_b_r_type;
  _f_b_r_type f_b_r;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif
#if defined(_WIN32) && defined(FALLEN)
  #undef FALLEN
#endif

  enum {
    NORMAL = 0u,
    FALLEN = 1u,
  };


  typedef boost::shared_ptr< ::rm_msgs::BalanceState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::BalanceState_<ContainerAllocator> const> ConstPtr;

}; // struct BalanceState_

typedef ::rm_msgs::BalanceState_<std::allocator<void> > BalanceState;

typedef boost::shared_ptr< ::rm_msgs::BalanceState > BalanceStatePtr;
typedef boost::shared_ptr< ::rm_msgs::BalanceState const> BalanceStateConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::BalanceState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::BalanceState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::BalanceState_<ContainerAllocator1> & lhs, const ::rm_msgs::BalanceState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.x == rhs.x &&
    lhs.phi == rhs.phi &&
    lhs.theta == rhs.theta &&
    lhs.x_b_l == rhs.x_b_l &&
    lhs.x_b_r == rhs.x_b_r &&
    lhs.x_dot == rhs.x_dot &&
    lhs.phi_dot == rhs.phi_dot &&
    lhs.theta_dot == rhs.theta_dot &&
    lhs.x_b_l_dot == rhs.x_b_l_dot &&
    lhs.x_b_r_dot == rhs.x_b_r_dot &&
    lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z &&
    lhs.T_l == rhs.T_l &&
    lhs.T_r == rhs.T_r &&
    lhs.f_b_l == rhs.f_b_l &&
    lhs.f_b_r == rhs.f_b_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::BalanceState_<ContainerAllocator1> & lhs, const ::rm_msgs::BalanceState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::BalanceState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::BalanceState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::BalanceState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::BalanceState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::BalanceState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::BalanceState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::BalanceState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "563c6259b4e510bcb83a9719793e4546";
  }

  static const char* value(const ::rm_msgs::BalanceState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x563c6259b4e510bcULL;
  static const uint64_t static_value2 = 0xb83a9719793e4546ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::BalanceState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/BalanceState";
  }

  static const char* value(const ::rm_msgs::BalanceState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::BalanceState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  NORMAL = 0\n"
"uint8  FALLEN = 1\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint8 mode\n"
"float64 x\n"
"float64 phi\n"
"float64 theta\n"
"float64 x_b_l\n"
"float64 x_b_r\n"
"float64 x_dot\n"
"float64 phi_dot\n"
"float64 theta_dot\n"
"float64 x_b_l_dot\n"
"float64 x_b_r_dot\n"
"float64 acc_x\n"
"float64 acc_y\n"
"float64 acc_z\n"
"\n"
"float64 T_l\n"
"float64 T_r\n"
"float64 f_b_l\n"
"float64 f_b_r\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::rm_msgs::BalanceState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::BalanceState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.x);
      stream.next(m.phi);
      stream.next(m.theta);
      stream.next(m.x_b_l);
      stream.next(m.x_b_r);
      stream.next(m.x_dot);
      stream.next(m.phi_dot);
      stream.next(m.theta_dot);
      stream.next(m.x_b_l_dot);
      stream.next(m.x_b_r_dot);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.T_l);
      stream.next(m.T_r);
      stream.next(m.f_b_l);
      stream.next(m.f_b_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BalanceState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::BalanceState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::BalanceState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "phi: ";
    Printer<double>::stream(s, indent + "  ", v.phi);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "x_b_l: ";
    Printer<double>::stream(s, indent + "  ", v.x_b_l);
    s << indent << "x_b_r: ";
    Printer<double>::stream(s, indent + "  ", v.x_b_r);
    s << indent << "x_dot: ";
    Printer<double>::stream(s, indent + "  ", v.x_dot);
    s << indent << "phi_dot: ";
    Printer<double>::stream(s, indent + "  ", v.phi_dot);
    s << indent << "theta_dot: ";
    Printer<double>::stream(s, indent + "  ", v.theta_dot);
    s << indent << "x_b_l_dot: ";
    Printer<double>::stream(s, indent + "  ", v.x_b_l_dot);
    s << indent << "x_b_r_dot: ";
    Printer<double>::stream(s, indent + "  ", v.x_b_r_dot);
    s << indent << "acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.acc_z);
    s << indent << "T_l: ";
    Printer<double>::stream(s, indent + "  ", v.T_l);
    s << indent << "T_r: ";
    Printer<double>::stream(s, indent + "  ", v.T_r);
    s << indent << "f_b_l: ";
    Printer<double>::stream(s, indent + "  ", v.f_b_l);
    s << indent << "f_b_r: ";
    Printer<double>::stream(s, indent + "  ", v.f_b_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_BALANCESTATE_H

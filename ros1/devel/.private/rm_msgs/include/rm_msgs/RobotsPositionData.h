// Generated by gencpp from file rm_msgs/RobotsPositionData.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_ROBOTSPOSITIONDATA_H
#define RM_MSGS_MESSAGE_ROBOTSPOSITIONDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct RobotsPositionData_
{
  typedef RobotsPositionData_<ContainerAllocator> Type;

  RobotsPositionData_()
    : hero_x(0.0)
    , hero_y(0.0)
    , engineer_x(0.0)
    , engineer_y(0.0)
    , standard_3_x(0.0)
    , standard_3_y(0.0)
    , standard_4_x(0.0)
    , standard_4_y(0.0)
    , standard_5_x(0.0)
    , standard_5_y(0.0)
    , stamp()  {
    }
  RobotsPositionData_(const ContainerAllocator& _alloc)
    : hero_x(0.0)
    , hero_y(0.0)
    , engineer_x(0.0)
    , engineer_y(0.0)
    , standard_3_x(0.0)
    , standard_3_y(0.0)
    , standard_4_x(0.0)
    , standard_4_y(0.0)
    , standard_5_x(0.0)
    , standard_5_y(0.0)
    , stamp()  {
  (void)_alloc;
    }



   typedef float _hero_x_type;
  _hero_x_type hero_x;

   typedef float _hero_y_type;
  _hero_y_type hero_y;

   typedef float _engineer_x_type;
  _engineer_x_type engineer_x;

   typedef float _engineer_y_type;
  _engineer_y_type engineer_y;

   typedef float _standard_3_x_type;
  _standard_3_x_type standard_3_x;

   typedef float _standard_3_y_type;
  _standard_3_y_type standard_3_y;

   typedef float _standard_4_x_type;
  _standard_4_x_type standard_4_x;

   typedef float _standard_4_y_type;
  _standard_4_y_type standard_4_y;

   typedef float _standard_5_x_type;
  _standard_5_x_type standard_5_x;

   typedef float _standard_5_y_type;
  _standard_5_y_type standard_5_y;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::rm_msgs::RobotsPositionData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::RobotsPositionData_<ContainerAllocator> const> ConstPtr;

}; // struct RobotsPositionData_

typedef ::rm_msgs::RobotsPositionData_<std::allocator<void> > RobotsPositionData;

typedef boost::shared_ptr< ::rm_msgs::RobotsPositionData > RobotsPositionDataPtr;
typedef boost::shared_ptr< ::rm_msgs::RobotsPositionData const> RobotsPositionDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::RobotsPositionData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::RobotsPositionData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::RobotsPositionData_<ContainerAllocator1> & lhs, const ::rm_msgs::RobotsPositionData_<ContainerAllocator2> & rhs)
{
  return lhs.hero_x == rhs.hero_x &&
    lhs.hero_y == rhs.hero_y &&
    lhs.engineer_x == rhs.engineer_x &&
    lhs.engineer_y == rhs.engineer_y &&
    lhs.standard_3_x == rhs.standard_3_x &&
    lhs.standard_3_y == rhs.standard_3_y &&
    lhs.standard_4_x == rhs.standard_4_x &&
    lhs.standard_4_y == rhs.standard_4_y &&
    lhs.standard_5_x == rhs.standard_5_x &&
    lhs.standard_5_y == rhs.standard_5_y &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::RobotsPositionData_<ContainerAllocator1> & lhs, const ::rm_msgs::RobotsPositionData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::RobotsPositionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::RobotsPositionData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::RobotsPositionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::RobotsPositionData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::RobotsPositionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::RobotsPositionData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::RobotsPositionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e7f2d67005a1f99559daa95d34395f2e";
  }

  static const char* value(const ::rm_msgs::RobotsPositionData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe7f2d67005a1f995ULL;
  static const uint64_t static_value2 = 0x59daa95d34395f2eULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::RobotsPositionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/RobotsPositionData";
  }

  static const char* value(const ::rm_msgs::RobotsPositionData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::RobotsPositionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 hero_x\n"
"float32 hero_y\n"
"float32 engineer_x\n"
"float32 engineer_y\n"
"float32 standard_3_x\n"
"float32 standard_3_y\n"
"float32 standard_4_x\n"
"float32 standard_4_y\n"
"float32 standard_5_x\n"
"float32 standard_5_y\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::RobotsPositionData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::RobotsPositionData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hero_x);
      stream.next(m.hero_y);
      stream.next(m.engineer_x);
      stream.next(m.engineer_y);
      stream.next(m.standard_3_x);
      stream.next(m.standard_3_y);
      stream.next(m.standard_4_x);
      stream.next(m.standard_4_y);
      stream.next(m.standard_5_x);
      stream.next(m.standard_5_y);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotsPositionData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::RobotsPositionData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::RobotsPositionData_<ContainerAllocator>& v)
  {
    s << indent << "hero_x: ";
    Printer<float>::stream(s, indent + "  ", v.hero_x);
    s << indent << "hero_y: ";
    Printer<float>::stream(s, indent + "  ", v.hero_y);
    s << indent << "engineer_x: ";
    Printer<float>::stream(s, indent + "  ", v.engineer_x);
    s << indent << "engineer_y: ";
    Printer<float>::stream(s, indent + "  ", v.engineer_y);
    s << indent << "standard_3_x: ";
    Printer<float>::stream(s, indent + "  ", v.standard_3_x);
    s << indent << "standard_3_y: ";
    Printer<float>::stream(s, indent + "  ", v.standard_3_y);
    s << indent << "standard_4_x: ";
    Printer<float>::stream(s, indent + "  ", v.standard_4_x);
    s << indent << "standard_4_y: ";
    Printer<float>::stream(s, indent + "  ", v.standard_4_y);
    s << indent << "standard_5_x: ";
    Printer<float>::stream(s, indent + "  ", v.standard_5_x);
    s << indent << "standard_5_y: ";
    Printer<float>::stream(s, indent + "  ", v.standard_5_y);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_ROBOTSPOSITIONDATA_H

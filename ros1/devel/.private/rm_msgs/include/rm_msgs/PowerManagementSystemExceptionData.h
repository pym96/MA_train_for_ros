// Generated by gencpp from file rm_msgs/PowerManagementSystemExceptionData.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_POWERMANAGEMENTSYSTEMEXCEPTIONDATA_H
#define RM_MSGS_MESSAGE_POWERMANAGEMENTSYSTEMEXCEPTIONDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct PowerManagementSystemExceptionData_
{
  typedef PowerManagementSystemExceptionData_<ContainerAllocator> Type;

  PowerManagementSystemExceptionData_()
    : r0(0)
    , r1(0)
    , r2(0)
    , r3(0)
    , r12(0)
    , LR(0)
    , PC(0)
    , PSR(0)
    , stamp()  {
    }
  PowerManagementSystemExceptionData_(const ContainerAllocator& _alloc)
    : r0(0)
    , r1(0)
    , r2(0)
    , r3(0)
    , r12(0)
    , LR(0)
    , PC(0)
    , PSR(0)
    , stamp()  {
  (void)_alloc;
    }



   typedef uint32_t _r0_type;
  _r0_type r0;

   typedef uint32_t _r1_type;
  _r1_type r1;

   typedef uint32_t _r2_type;
  _r2_type r2;

   typedef uint32_t _r3_type;
  _r3_type r3;

   typedef uint32_t _r12_type;
  _r12_type r12;

   typedef uint32_t _LR_type;
  _LR_type LR;

   typedef uint32_t _PC_type;
  _PC_type PC;

   typedef uint32_t _PSR_type;
  _PSR_type PSR;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> const> ConstPtr;

}; // struct PowerManagementSystemExceptionData_

typedef ::rm_msgs::PowerManagementSystemExceptionData_<std::allocator<void> > PowerManagementSystemExceptionData;

typedef boost::shared_ptr< ::rm_msgs::PowerManagementSystemExceptionData > PowerManagementSystemExceptionDataPtr;
typedef boost::shared_ptr< ::rm_msgs::PowerManagementSystemExceptionData const> PowerManagementSystemExceptionDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator1> & lhs, const ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator2> & rhs)
{
  return lhs.r0 == rhs.r0 &&
    lhs.r1 == rhs.r1 &&
    lhs.r2 == rhs.r2 &&
    lhs.r3 == rhs.r3 &&
    lhs.r12 == rhs.r12 &&
    lhs.LR == rhs.LR &&
    lhs.PC == rhs.PC &&
    lhs.PSR == rhs.PSR &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator1> & lhs, const ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48dc20c9346b76eeb74bcfd0aefcc86d";
  }

  static const char* value(const ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48dc20c9346b76eeULL;
  static const uint64_t static_value2 = 0xb74bcfd0aefcc86dULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/PowerManagementSystemExceptionData";
  }

  static const char* value(const ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 r0\n"
"uint32 r1\n"
"uint32 r2\n"
"uint32 r3\n"
"uint32 r12\n"
"uint32 LR\n"
"uint32 PC\n"
"uint32 PSR\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r0);
      stream.next(m.r1);
      stream.next(m.r2);
      stream.next(m.r3);
      stream.next(m.r12);
      stream.next(m.LR);
      stream.next(m.PC);
      stream.next(m.PSR);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerManagementSystemExceptionData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::PowerManagementSystemExceptionData_<ContainerAllocator>& v)
  {
    s << indent << "r0: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.r0);
    s << indent << "r1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.r1);
    s << indent << "r2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.r2);
    s << indent << "r3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.r3);
    s << indent << "r12: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.r12);
    s << indent << "LR: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.LR);
    s << indent << "PC: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.PC);
    s << indent << "PSR: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.PSR);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_POWERMANAGEMENTSYSTEMEXCEPTIONDATA_H

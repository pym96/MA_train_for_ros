// Generated by gencpp from file rm_msgs/MapSentryData.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_MAPSENTRYDATA_H
#define RM_MSGS_MESSAGE_MAPSENTRYDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct MapSentryData_
{
  typedef MapSentryData_<ContainerAllocator> Type;

  MapSentryData_()
    : intention(0)
    , start_position_x(0)
    , start_position_y(0)
    , delta_x()
    , delta_y()
    , stamp()  {
      delta_x.assign(0);

      delta_y.assign(0);
  }
  MapSentryData_(const ContainerAllocator& _alloc)
    : intention(0)
    , start_position_x(0)
    , start_position_y(0)
    , delta_x()
    , delta_y()
    , stamp()  {
  (void)_alloc;
      delta_x.assign(0);

      delta_y.assign(0);
  }



   typedef uint8_t _intention_type;
  _intention_type intention;

   typedef uint16_t _start_position_x_type;
  _start_position_x_type start_position_x;

   typedef uint16_t _start_position_y_type;
  _start_position_y_type start_position_y;

   typedef boost::array<int8_t, 49>  _delta_x_type;
  _delta_x_type delta_x;

   typedef boost::array<int8_t, 49>  _delta_y_type;
  _delta_y_type delta_y;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::rm_msgs::MapSentryData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::MapSentryData_<ContainerAllocator> const> ConstPtr;

}; // struct MapSentryData_

typedef ::rm_msgs::MapSentryData_<std::allocator<void> > MapSentryData;

typedef boost::shared_ptr< ::rm_msgs::MapSentryData > MapSentryDataPtr;
typedef boost::shared_ptr< ::rm_msgs::MapSentryData const> MapSentryDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::MapSentryData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::MapSentryData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::MapSentryData_<ContainerAllocator1> & lhs, const ::rm_msgs::MapSentryData_<ContainerAllocator2> & rhs)
{
  return lhs.intention == rhs.intention &&
    lhs.start_position_x == rhs.start_position_x &&
    lhs.start_position_y == rhs.start_position_y &&
    lhs.delta_x == rhs.delta_x &&
    lhs.delta_y == rhs.delta_y &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::MapSentryData_<ContainerAllocator1> & lhs, const ::rm_msgs::MapSentryData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::MapSentryData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::MapSentryData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::MapSentryData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::MapSentryData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::MapSentryData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::MapSentryData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::MapSentryData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6e15a95bf254643938dfaa446ff12c8";
  }

  static const char* value(const ::rm_msgs::MapSentryData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6e15a95bf254643ULL;
  static const uint64_t static_value2 = 0x938dfaa446ff12c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::MapSentryData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/MapSentryData";
  }

  static const char* value(const ::rm_msgs::MapSentryData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::MapSentryData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 intention\n"
"uint16 start_position_x\n"
"uint16 start_position_y\n"
"int8[49] delta_x\n"
"int8[49] delta_y\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::MapSentryData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::MapSentryData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intention);
      stream.next(m.start_position_x);
      stream.next(m.start_position_y);
      stream.next(m.delta_x);
      stream.next(m.delta_y);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapSentryData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::MapSentryData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::MapSentryData_<ContainerAllocator>& v)
  {
    s << indent << "intention: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.intention);
    s << indent << "start_position_x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.start_position_x);
    s << indent << "start_position_y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.start_position_y);
    s << indent << "delta_x[]" << std::endl;
    for (size_t i = 0; i < v.delta_x.size(); ++i)
    {
      s << indent << "  delta_x[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.delta_x[i]);
    }
    s << indent << "delta_y[]" << std::endl;
    for (size_t i = 0; i < v.delta_y.size(); ++i)
    {
      s << indent << "  delta_y[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.delta_y[i]);
    }
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_MAPSENTRYDATA_H

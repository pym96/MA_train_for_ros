// Generated by gencpp from file rm_msgs/ClientMapSendData.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_CLIENTMAPSENDDATA_H
#define RM_MSGS_MESSAGE_CLIENTMAPSENDDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct ClientMapSendData_
{
  typedef ClientMapSendData_<ContainerAllocator> Type;

  ClientMapSendData_()
    : target_position_x(0.0)
    , target_position_y(0.0)
    , target_position_z(0.0)
    , command_keyboard(0)
    , target_robot_ID(0)
    , stamp()  {
    }
  ClientMapSendData_(const ContainerAllocator& _alloc)
    : target_position_x(0.0)
    , target_position_y(0.0)
    , target_position_z(0.0)
    , command_keyboard(0)
    , target_robot_ID(0)
    , stamp()  {
  (void)_alloc;
    }



   typedef float _target_position_x_type;
  _target_position_x_type target_position_x;

   typedef float _target_position_y_type;
  _target_position_y_type target_position_y;

   typedef float _target_position_z_type;
  _target_position_z_type target_position_z;

   typedef uint8_t _command_keyboard_type;
  _command_keyboard_type command_keyboard;

   typedef uint16_t _target_robot_ID_type;
  _target_robot_ID_type target_robot_ID;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(KEY_A)
  #undef KEY_A
#endif
#if defined(_WIN32) && defined(KEY_H)
  #undef KEY_H
#endif
#if defined(_WIN32) && defined(KEY_K)
  #undef KEY_K
#endif
#if defined(_WIN32) && defined(KEY_L)
  #undef KEY_L
#endif
#if defined(_WIN32) && defined(KEY_N)
  #undef KEY_N
#endif
#if defined(_WIN32) && defined(KEY_O)
  #undef KEY_O
#endif
#if defined(_WIN32) && defined(KEY_U)
  #undef KEY_U
#endif

  enum {
    KEY_A = 65u,
    KEY_H = 72u,
    KEY_K = 75u,
    KEY_L = 76u,
    KEY_N = 78u,
    KEY_O = 79u,
    KEY_U = 85u,
  };


  typedef boost::shared_ptr< ::rm_msgs::ClientMapSendData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::ClientMapSendData_<ContainerAllocator> const> ConstPtr;

}; // struct ClientMapSendData_

typedef ::rm_msgs::ClientMapSendData_<std::allocator<void> > ClientMapSendData;

typedef boost::shared_ptr< ::rm_msgs::ClientMapSendData > ClientMapSendDataPtr;
typedef boost::shared_ptr< ::rm_msgs::ClientMapSendData const> ClientMapSendDataConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::ClientMapSendData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::ClientMapSendData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::ClientMapSendData_<ContainerAllocator1> & lhs, const ::rm_msgs::ClientMapSendData_<ContainerAllocator2> & rhs)
{
  return lhs.target_position_x == rhs.target_position_x &&
    lhs.target_position_y == rhs.target_position_y &&
    lhs.target_position_z == rhs.target_position_z &&
    lhs.command_keyboard == rhs.command_keyboard &&
    lhs.target_robot_ID == rhs.target_robot_ID &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::ClientMapSendData_<ContainerAllocator1> & lhs, const ::rm_msgs::ClientMapSendData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::ClientMapSendData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::ClientMapSendData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::ClientMapSendData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::ClientMapSendData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::ClientMapSendData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::ClientMapSendData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::ClientMapSendData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ccfd8a27a3d104fd1e8e4702a1b153a";
  }

  static const char* value(const ::rm_msgs::ClientMapSendData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ccfd8a27a3d104fULL;
  static const uint64_t static_value2 = 0xd1e8e4702a1b153aULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::ClientMapSendData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/ClientMapSendData";
  }

  static const char* value(const ::rm_msgs::ClientMapSendData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::ClientMapSendData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 KEY_A = 65\n"
"uint8 KEY_H = 72\n"
"uint8 KEY_K = 75\n"
"uint8 KEY_L = 76\n"
"uint8 KEY_N = 78\n"
"uint8 KEY_O = 79\n"
"uint8 KEY_U = 85\n"
"\n"
"float32 target_position_x\n"
"float32 target_position_y\n"
"float32 target_position_z\n"
"uint8 command_keyboard\n"
"uint16 target_robot_ID\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::ClientMapSendData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::ClientMapSendData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_position_x);
      stream.next(m.target_position_y);
      stream.next(m.target_position_z);
      stream.next(m.command_keyboard);
      stream.next(m.target_robot_ID);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClientMapSendData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::ClientMapSendData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::ClientMapSendData_<ContainerAllocator>& v)
  {
    s << indent << "target_position_x: ";
    Printer<float>::stream(s, indent + "  ", v.target_position_x);
    s << indent << "target_position_y: ";
    Printer<float>::stream(s, indent + "  ", v.target_position_y);
    s << indent << "target_position_z: ";
    Printer<float>::stream(s, indent + "  ", v.target_position_z);
    s << indent << "command_keyboard: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command_keyboard);
    s << indent << "target_robot_ID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.target_robot_ID);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_CLIENTMAPSENDDATA_H

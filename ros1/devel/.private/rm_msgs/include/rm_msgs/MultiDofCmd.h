// Generated by gencpp from file rm_msgs/MultiDofCmd.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_MULTIDOFCMD_H
#define RM_MSGS_MESSAGE_MULTIDOFCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace rm_msgs
{
template <class ContainerAllocator>
struct MultiDofCmd_
{
  typedef MultiDofCmd_<ContainerAllocator> Type;

  MultiDofCmd_()
    : stamp()
    , mode(0)
    , linear()
    , angular()  {
    }
  MultiDofCmd_(const ContainerAllocator& _alloc)
    : stamp()
    , mode(0)
    , linear(_alloc)
    , angular(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_type;
  _linear_type linear;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_type;
  _angular_type angular;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VELOCITY)
  #undef VELOCITY
#endif
#if defined(_WIN32) && defined(POSITION)
  #undef POSITION
#endif

  enum {
    VELOCITY = 0u,
    POSITION = 1u,
  };


  typedef boost::shared_ptr< ::rm_msgs::MultiDofCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::MultiDofCmd_<ContainerAllocator> const> ConstPtr;

}; // struct MultiDofCmd_

typedef ::rm_msgs::MultiDofCmd_<std::allocator<void> > MultiDofCmd;

typedef boost::shared_ptr< ::rm_msgs::MultiDofCmd > MultiDofCmdPtr;
typedef boost::shared_ptr< ::rm_msgs::MultiDofCmd const> MultiDofCmdConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::MultiDofCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::MultiDofCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::MultiDofCmd_<ContainerAllocator1> & lhs, const ::rm_msgs::MultiDofCmd_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.mode == rhs.mode &&
    lhs.linear == rhs.linear &&
    lhs.angular == rhs.angular;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::MultiDofCmd_<ContainerAllocator1> & lhs, const ::rm_msgs::MultiDofCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::MultiDofCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::MultiDofCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::MultiDofCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::MultiDofCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::MultiDofCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::MultiDofCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::MultiDofCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ef5d8d462010858e9cd0f8a34969a34";
  }

  static const char* value(const ::rm_msgs::MultiDofCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ef5d8d462010858ULL;
  static const uint64_t static_value2 = 0xe9cd0f8a34969a34ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::MultiDofCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/MultiDofCmd";
  }

  static const char* value(const ::rm_msgs::MultiDofCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::MultiDofCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 VELOCITY = 0\n"
"uint8 POSITION = 1\n"
"\n"
"time stamp\n"
"uint8 mode\n"
"\n"
"# VELOCITY/POSITION\n"
"geometry_msgs/Vector3 linear\n"
"geometry_msgs/Vector3 angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rm_msgs::MultiDofCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::MultiDofCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.mode);
      stream.next(m.linear);
      stream.next(m.angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiDofCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::MultiDofCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::MultiDofCmd_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "linear: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear);
    s << indent << "angular: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_MULTIDOFCMD_H
